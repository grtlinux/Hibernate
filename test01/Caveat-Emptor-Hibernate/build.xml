<project name="CaveatEmptor Native" default="test.integration" basedir=".">

    <!-- Name of project and version -->
    <property name="proj.name"      value="CaveatEmptor Native"/>
    <property name="proj.shortname" value="caveatemptor-native"/>
    <property name="version"        value="20061109"/>

    <!-- Global properties for this build -->
    <property name="database.dir"           value="database"/>
    <property name="src.java.dir"           value="src/java"/>
    <property name="src.etc.dir"            value="src/etc"/>
    <property name="src.conf.dir"           value="src/etc/conf"/>
    <property name="lib.dir"                value="lib"/>
    <property name="build.dir"              value="build"/>
    <property name="build.classes.dir"      value="${build.dir}/classes"/>

    <!-- Classpath declaration -->
    <path id="project.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
            <include name="**/*.zip"/>
        </fileset>
    </path>

    <!-- Useful shortcuts -->
    <patternset id="meta.files">
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
        <include name="**/*.dtd"/>
        <include name="**/*.sql"/>
    </patternset>

    <!-- Clean up -->
    <target name="clean" description="Clean the build directory">
        <delete dir="${build.dir}"/>
        <mkdir dir="${build.dir}"/>
    </target>

    <!-- Compile Java source -->
    <target name="compile">
        <mkdir dir="${build.classes.dir}"/>
        <javac srcdir="${src.java.dir}"
               destdir="${build.classes.dir}"
               classpathref="project.classpath"/>
    </target>

    <!-- Copy metadata to build classpath -->
    <target name="copymetafiles">
        <mkdir dir="${build.classes.dir}"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.java.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.conf.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>
    </target>

    <target name="instrument.lazyloading" depends="compile, copymetafiles"
            description="Enhance bytecode for lazy loading interception">

        <taskdef name="instrument" classname="org.hibernate.tool.instrument.cglib.InstrumentTask">
            <classpath>
                <path refid="project.classpath"/>
                <pathelement path="${build.classes.dir}"/>
            </classpath>
        </taskdef>

        <instrument verbose="true">
            <fileset dir="${build.classes.dir}/org/hibernate/ce/auction/model">
                <include name="*.class"/>
            </fileset>
        </instrument>
    </target>

    <taskdef name="aopc" classname="org.jboss.aop.ant.AopC">
        <classpath refid="project.classpath"/>
    </taskdef>
    <target name="instrument.aop" depends="compile"
            description="Run the AOP compiler to weave interception code">
        <aopc classpath="${build.classes.dir}">
            <compilerclasspath>
                <path refid="project.classpath"/>
            </compilerclasspath>
            <src path="${build.classes.dir}"/>
            <include name="**/*.class"/>
        </aopc>
    </target>

    <!-- ################ TestNG ###################### -->

    <property name="test.output.dir" value="${build.dir}/test-output"/>
    <taskdef resource="testngtasks" classpathref="project.classpath"/>

    <target name="test.integration" depends="compile, copymetafiles" description="Run the integration tests">

        <delete dir="${test.output.dir}"/>
        <mkdir dir="${test.output.dir}"/>
        <testng outputDir="${test.output.dir}">
            <classpath>
                <path refid="project.classpath"/>
                <pathelement path="${build.classes.dir}"/>
            </classpath>
            <xmlfileset dir="${src.etc.dir}">
                <include name="testsuite-integration-hibernate.xml"/>
            </xmlfileset>
        </testng>
        <echo>Validate the result of the test in ${test.output.dir}!</echo>
    </target>

    <target name="test.aop.instrumented" depends="compile, copymetafiles, instrument.aop"
        description="Run the AOP tests with build-time instrumentation">
        <delete dir="${test.output.dir}"/>
        <mkdir dir="${test.output.dir}"/>

        <testng outputDir="${test.output.dir}">
            <classpath>
                <path refid="project.classpath"/>
                <pathelement path="${build.classes.dir}"/>
            </classpath>
            <xmlfileset dir="${src.etc.dir}">
                <include name="testsuite-aop-hibernate.xml"/>
            </xmlfileset>
        </testng>
        <echo>Validate the result of the test in ${test.output.dir}!</echo>
    </target>

    <target name="test.aop.classloader" depends="compile, copymetafiles"
        description="Run the AOP tests with load-time instrumentation">
        <echo>To run on JDK 1.4 download JBoss AOP and don't use lib/jboss-aop-jdk5.jar!</echo>

        <delete dir="${test.output.dir}"/>
        <mkdir dir="${test.output.dir}"/>

        <!-- Compile a custom classloader first, for JDK 5.0 (see note above) -->
        <java
            classname="org.jboss.aop.hook.GenerateInstrumentedClassLoader"
            classpathref="project.classpath"
            fork="yes"
            failonerror="true">
            <arg value="${build.dir}/custom-aop-loader"/>
        </java>

        <!-- Need custom bootclasspath... -->
        <path id="custom.bootclasspath">
            <fileset dir="${lib.dir}">
                <include name="**/jboss*.jar"/>
                <include name="**/concurrent*.jar"/>
                <include name="**/javassist*.jar"/>
                <include name="**/trove*.jar"/>
                <include name="**/log4j*.jar"/>
            </fileset>
            <pathelement path="${build.dir}/custom-aop-loader"/>
        </path>
        <property name="bootclasspath" refid="custom.bootclasspath"/>

        <!-- Run tests with custom classloader in boot classpath, prepended -->
        <testng outputDir="${test.output.dir}">
            <jvmarg value="-Xbootclasspath/p:${bootclasspath}"/>
            <jvmarg value="-Djboss.aop.exclude=org.hibernate.impl"/>
            <!-- Ignoring these prevents warnings -->
            <jvmarg value="-Djboss.aop.ignore=*ByCGLIB$$*,*dom4j*,*oracle*,*objectweb*"/>
            <classpath>
                <path refid="project.classpath"/>
                <pathelement path="${build.classes.dir}"/>
            </classpath>
            <xmlfileset dir="${src.etc.dir}">
                <include name="testsuite-aop-hibernate.xml"/>
            </xmlfileset>
        </testng>
    </target>


    <!-- ################ Hibernate Tools ###################### -->

    <taskdef name="hibernatetool"
             classname="org.hibernate.tool.ant.HibernateToolTask"
             classpathref="project.classpath"/>

    <!-- Export the database schema -->
    <target name="schemaexport" depends="compile, copymetafiles"
        description="Exports schema DDL to file in build directory">

        <hibernatetool destdir="${basedir}">
            <classpath path="${build.classes.dir}"/>
            <configuration configurationfile="${build.classes.dir}/hibernate.cfg.xml"/>
            <hbm2ddl
                drop="true"
                create="true"
                export="false"
                outputfilename="${build.dir}/${proj.shortname}-ddl.sql"
                delimiter=";"
                format="true"/>
        </hibernatetool>
    </target>

    <!-- ################ HSQL DB ###################### -->

    <!-- Start the HSQL DB server -->
    <target name="startdb" description="Run HSQL database server with clean DB">
        <!-- Delete database files -->
        <delete dir="${database.dir}"/>
        <java classname="org.hsqldb.Server"
              fork="yes"
              classpathref="project.classpath"
              failonerror="true">
            <arg value="-database.0"/>
            <arg value="file:${database.dir}/db"/>
        </java>
    </target>

    <!-- Start the HSQL DB browser tool -->
    <target name="dbmanager" description="Start HSQL DB manager">
        <java
            classname="org.hsqldb.util.DatabaseManagerSwing"
            fork="yes"
            classpathref="project.classpath"
            failonerror="true">
            <arg value="-url"/>
            <arg value="jdbc:hsqldb:hsql://localhost/"/>
            <arg value="-driver"/>
            <arg value="org.hsqldb.jdbcDriver"/>
        </java>
    </target>

</project>
